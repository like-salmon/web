#!/usr/bin/env python
#coding:utf-8

from __future__ import division
import tornado.web
from pyquery import PyQuery as pq
import os,re,sys,math,random,json,time
from template.wmodules import *
from app.webCaptcha import webCaptcha
from tornado.escape import json_decode,json_encode
from tornado import gen

__metaclass__ = type

class baseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        """{current_user} in template,request:self.current_user"""
        return self.get_secure_cookie("user")

    @property
    def db(self):
        return self.application.db

class mainHandler(baseHandler):
    def get(self):
        active ="index"
        sql = "select * from llidc_news"
        newscond = "n_type = 1"
        noticecond = "n_type = 2"
        news = self.db.where(newscond).orderby("n_datetime","desc").limit(4).getmany(sql)
        #news = self.db.orderby("n_datetime", "desc").limit(4).getmany(sql)
        notices = self.db.where(noticecond).orderby("n_datetime","desc").limit(4).getmany(sql)
        return self.render("index.html",active=active,news = news,notices = notices)
    def post(self):
        pass

class rentHandler(baseHandler):
    
    def get(self):
        active ="rent"
        return self.render("rent.html",active=active)
    
    def post(self):
        pass

class hostHandler(baseHandler):
    
    def get(self):
        active ="host"
        return self.render("host.html",active=active)
    
    def post(self):
        pass

class contactHandler(baseHandler):

    def get(self):
        active ="contact"
        return self.render("contact.html",active=active)

    def post(self):
        pass

class solutionHandler(baseHandler):
    
    def get(self):
        active ="slt"
        return self.render("solution.html",active=active)
    
    def post(self):
        pass

class vistHandler(baseHandler):
    def get(self):
        active ="visit"
        return self.render("visit.html",active=active)

    def post(self):
        pass

class newsHandler(baseHandler):
    def get(self,id):
        active ="index"
        cond = "n_id = "+id
        sql = "select * from llidc_news"
        news = self.db.where(cond).getone(sql)
        return self.render("news.html",active=active,news = news)
    def post(self):
        pass

class activitiesHandler(baseHandler):
    def get(self):
        active ="solution"
        return self.render("activities.html",active=active)
    def post(self):
        pass

class asServiceHandler(baseHandler):
    def get(self):
        active = ""
        return self.render("as-service.html", active=active)
    def post(self):
        self.send_error(403)

class serviceContractHandler(baseHandler):
    def get(self):
        active = ""
        return self.render("service-contract.html", active=active)
    def post(self):
        self.send_error(403)