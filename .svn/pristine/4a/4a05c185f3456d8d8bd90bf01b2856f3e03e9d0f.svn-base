#!/usr/bin/env python
#coding:utf-8

from __future__ import division
import tornado.web
from pyquery import PyQuery as pq
import os,re,sys,math,random,json,time,datetime
from template.wmodules import *
from app.webCaptcha import webCaptcha
from tornado.escape import json_decode,json_encode
from tornado import gen
import hashlib
from datetime import datetime as dt

__metaclass__ = type

class baseHandler(tornado.web.RequestHandler):
    def __init__(self,application,*args,**kwds):
        tornado.web.RequestHandler.__init__(self,application,*args,**kwds)
        self.thisyear = dt.now().year
        self.ctype = ""#user type
        self.uname = ""#user name
        #print self.get_secure_cookie("_n")
        print self.request.uri
        if self.get_secure_cookie("_ac") and not self.ctype and self.request.uri.startswith("/admin"):
            print type(self.get_secure_cookie("_n"))
            sql = "SELECT * FROM llidc_employees"
            where = "u_acc = '%s'" % self.get_secure_cookie("_ac")
            em = self.db.where(where).getone(sql)
            self.ctype = em[5]
            self.uname = em[2]

    def get_current_user(self):
        """{current_user} in template,request:self.current_user"""
        return self.get_secure_cookie("_n")

    @property
    def db(self):
        return self.application.db

class mainHandler(baseHandler):
    def get(self):
        active ="index"
        sql = "select * from llidc_news"
        newscond = "n_type = 1"
        noticecond = "n_type = 2"
        news = self.db.where(newscond).orderby("n_datetime","desc").limit(4).getmany(sql)
        #news = self.db.orderby("n_datetime", "desc").limit(4).getmany(sql)
        notices = self.db.where(noticecond).orderby("n_datetime","desc").limit(4).getmany(sql)
        return self.render("index.html",active=active,news = news,notices = notices)
    def post(self):
        pass

class rentHandler(baseHandler):
    
    def get(self):
        active ="rent"
        return self.render("rent.html",active=active)
    
    def post(self):
        pass

class hostHandler(baseHandler):
    
    def get(self):
        active ="host"
        return self.render("host.html",active=active)
    
    def post(self):
        pass

class contactHandler(baseHandler):

    def get(self):
        active ="contact"
        return self.render("contact.html",active=active)

    def post(self):
        pass

class solutionHandler(baseHandler):
    
    def get(self):
        active ="slt"
        return self.render("solution.html",active=active)
    
    def post(self):
        pass

class vistHandler(baseHandler):
    def get(self):
        active ="visit"
        return self.render("visit.html",active=active)

    def post(self):
        pass

class newsHandler(baseHandler):
    def get(self,id):
        active ="index"
        cond = "n_id = "+id
        sql = "select * from llidc_news"
        news = self.db.where(cond).getone(sql)
        return self.render("news.html",active=active,news = news)
    def post(self):
        pass

class activitiesHandler(baseHandler):
    def get(self):
        active ="solution"
        return self.render("activities.html",active=active)
    def post(self):
        pass

class asServiceHandler(baseHandler):
    def get(self):
        active = ""
        return self.render("as-service.html", active=active)
    def post(self):
        self.send_error(403)

class serviceContractHandler(baseHandler):

    def get(self):
        active = ""
        return self.render("service-contract.html", active=active)

    def post(self):
        self.send_error(403)

class adminLoginHandler(baseHandler):
    def get(self):
        if self.get_secure_cookie("_n",""):
            active = "index"
            return self.redirect("/admin/overview/")
        imgc = webCaptcha()
        imglist = imgc.saveImg()
        thiscc = imglist[1]  # 当前的验证码
        self.set_secure_cookie("cc",thiscc,expires_days=1)
        return self.render("admin/admin_login.html",acc=imglist[0])

    def post(self):
        uacc = self.get_argument("uacc", "")
        ampwd = self.get_argument("upwd", "")
        md5 = hashlib.md5()
        md5.update(ampwd + "llidc")
        ampwded = md5.hexdigest()
        sql = "SELECT * FROM llidc_employees"
        where = "u_acc = '%s'" % uacc
        em = self.db.where(where).getone(sql)
        active = "index"
        if ampwded == em[3]:
            self.set_secure_cookie("_n",em[2])
            self.set_secure_cookie("_ac", em[1])
            next = self.get_argument("next", "")
            if next:
                return self.redirect(next)  # rediret to the previous url
            return self.redirect("/admin/redict/")
        else:
            self.redirect("/")


#generate captcha
class captchaHandler(baseHandler):
    def get(self):
        """get current timestamp,if abuse then forbid,one ip"""
        tstamp = self.get_argument("tstamp","")
        lstamp = self.get_secure_cookie("ts")#获取上次生成验证的时间
        if not lstamp:
            self.set_secure_cookie("ts",tstamp,2)
            imgc = webCaptcha()
            imglist = imgc.saveImg()
            thiscc = imglist[1]  # 当前验证码
            self.set_secure_cookie("cc", thiscc, 1)
            imgjson = json.dumps({"imgsrc": imglist[0]})
            return self.write(imgjson)
        else:
            self.set_secure_cookie("ts",lstamp+","+tstamp)
            td = [int(i) for i in (lstamp+","+tstamp).split(",")]
        if len(td) >5 and len(td)%2 ==0:
            diff = reduce(lambda x,y:y-x,td)
            if diff<3000:
                self.set_secure_cookie("ts",tstamp,2)
                imgc = webCaptcha()
                imglist = imgc.saveImg()
                thiscc = imglist[1]  # 当前验证码
                self.set_secure_cookie("cc", thiscc, 1)
                #imgjson = json.dumps({"imgsrc": imglist[0],"cre":1})
                return self.write(json.dumps({"tscre":{"imgsrc": imglist[0],"cre":1}}))
            else:
                self.set_secure_cookie("ts", tstamp, 2)
                imgc = webCaptcha()
                imglist = imgc.saveImg()
                thiscc = imglist[1]  # 当前验证码
                self.set_secure_cookie("cc", thiscc, 1)
                imgjson = json.dumps({"imgsrc": imglist[0]})
                return self.write(imgjson)
        else:
            imgc = webCaptcha()
            imglist = imgc.saveImg()
            thiscc = imglist[1]  # 当前验证码
            self.set_secure_cookie("cc", thiscc, 1)
            imgjson = json.dumps({"imgsrc": imglist[0]})
            return self.write(imgjson)


#check captcha
class checkCaptchaHandler(baseHandler):
    def get(self):
        cc = self.get_query_argument("cc", "").upper()
        if cc:
            # 验证用户输入的验证码
            ckcc = self.get_secure_cookie("cc").upper()
            if cc != ckcc:
                ccerr = {"cre": 1}
                return self.write(json.dumps(ccerr))
            else:
                cccr = {"cre": 0}
                return self.write(json.dumps(cccr))
        else:
            self.send_error(403)

    def post(self):
        pass

class adminOverviewHandler(baseHandler):
    @tornado.web.authenticated
    def get(self):
        active = "index"
        return self.render("admin/admin_overview.html",active=active,ctype=self.ctype)

    def post(self):
        self.send_error(403)

#log out
class quitHandler(baseHandler):
    @tornado.web.authenticated
    def get(self):
        self.clear_cookie("_n")
        self.redirect("/")

class adminAllMahcinesHandler(baseHandler):
    @tornado.web.authenticated
    def get(self):
        offset = int(self.get_argument("offset", "1")) - 1
        kwds = self.get_argument("sms", "").encode("utf8")  # unicode to utf8
        sql = "select * from llidc_machines"
        csql = "select count(*) from llidc_machines"
        field = "m_reg_time"
        num = 13
        count = self.db.getsum(csql)  # total num of machines
        condition = ""
        if kwds:
            condition = ""
        # print count
        if count % num == 0:
            pages = count // num
        else:
            pages = count // num + 1
        ms = self.db.orderby(field, "desc").limit((offset) * 13, num).getmany(sql)
        return self.render("admin/admin_machines.html", ms=ms, count=count, active="machines", pages=pages,offset=offset + 1,ctype = self.ctype,kwds = kwds)

class adminRedirectHandler(baseHandler):
    @tornado.web.authenticated
    def get(self):
        return self.render("admin/admin_redirect.html",active = "index",ctype = self.ctype)

class adminMachinesHandler(baseHandler):
    def get(self):
        self.send_error(403)
    @tornado.web.authenticated
    def post(self):
        ip = self.get_argument("ips","")#machine's ip
        loca = self.get_argument("loca","")#location of the machine
        cabi = self.get_argument("c_num","")#cabinet num
        num = self.get_argument("m_num","")#machine num,unique
        wy_num = self.get_argument("wy_m_num","")#same as above,unique
        bw = self.get_argument("bw","")#bandwidth
        status = self.get_argument("status","")#machine status
        config = self.get_argument("config","")#machine's configuration
        memo = self.get_argument("memo","")#machine's memo
        sql = "insert into llidc_machines (m_ip,m_idc_location,m_cabinet_num,m_num,m_num_wy,m_bandwidth,m_status,m_config,m_memo) values (%s,%s,%s,%s,%s,%s,%s,%s,%s)"
        values = (ip,loca,cabi,num,wy_num,bw,status,config,memo)
        result = self.db.insertone(sql,values)
        if result:
            self.finish(json_encode({"rs":"1024"}))#successfully added the machine
        else:
            self.finish(json_encode({"rs": "1025"}))  # fail to  add the machine

class adminOrdersHandler(baseHandler):
    @tornado.web.authenticated
    def get(self):
        """join machines and orders table"""
        offset = int(self.get_argument("offset", "1")) - 1
        kwds = self.get_argument("osms", "").encode("utf8")  # unicode to utf8
        sql = "select * from llidc_orders"
        csql = "select count(*) from llidc_orders"
        if self.ctype == 5:  # admin check all orders details
            condition = ''
            count = self.db.getsum(csql)  # total num of orders
        else:
            condition = "o_sales = '%s'"%self.uname
            count = self.db.where(condition).getsum(csql)  # total num of orders
        field = "o_id"
        num = 13

        if kwds:
            condition = ""
        # print count
        if count % num == 0:
            pages = count // num
        else:
            pages = count // num + 1
        orders = self.db.orderby(field, "desc").limit((offset) * 13, num).getmany(sql)
        return self.render("admin/admin_orders.html",orders=orders,count=count,active="orders",pages=pages,offset=offset + 1, ctype=self.ctype, kwds=kwds)

    @tornado.web.authenticated
    def post(self):
        #auditor will not put here
        ip = self.get_argument("ips","")
        cid = self.get_argument("cid","")#client's id
        payment = self.get_argument("pm","")#order payment amount
        st = self.get_argument("sdt","")#the time order starts from
        et = self.get_argument("edt","")#the time order ends at
        stype = self.get_argument("stype","")#order status
        sales = self.get_argument("sales","")#to whom the order belongs to
        memo = self.get_argument("memo","")#memo of the order
        sql = "insert into llidc_orders (o_ip,o_client_id,o_payment,o_start_datetime,o_expire_datetime,o_m_stype,o_sales,o_memo) values(%s,%s,%s,%s,%s,%s,%s,%s)"
        values = (ip,cid,payment,st,et,stype,sales,memo)
        result = self.db.insertone(sql,values)
        if result:
            #modify machine's status according to service type
            sql = "update llidc_machines set m_status = '%s'"%stype
            condition = "m_ip = '%s'"%ip
            self.db.where(condition).updateone(sql)
            self.finish(json_encode({"rs": "1026"}))  # successfully added the order
        else:
            self.finish(json_encode({"rs": "1027"}))  # fail to  add the order

class adminOrdersModifyHandler(baseHandler):
    @tornado.web.authenticated
    def get(self,oid):
        sql = "select * from llidc_orders o join llidc_clients c on o.o_client_id = c.c_acc join llidc_machines m on m.m_ip = o.o_ip"#join tables
        condition = "o_id = '%s'"%oid
        order = self.db.where(condition).getone(sql)
        order = map(lambda x: dt.strftime(x, '%Y/%m/%d') if isinstance(x,(datetime.datetime, datetime.date)) else x,order)
        order = map(lambda x: x if x else "", order)#remove null
        return self.finish(json_encode({"order":order}))

    @tornado.web.authenticated
    def post(self):
        pass

class removeMachineHandler(baseHandler):
    @tornado.web.authenticated
    def get(self,id):
        sql = "delete from llidc_machines"
        condition = "m_id = '%s'"%id
        result = self.db.where(condition).remove(sql)
        if result:
            self.finish(json_encode({"rs":"1028"}))
        else:
            self.finish(json_encode({"rs":"1029"}))











