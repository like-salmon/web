#!/usr/bin/ python
#coding:utf-8

import MySQLdb,time,datetime
from config.settings import dbsettings as ds

__metaclass__ = type 

class dbWrapper():
    """mydql CRUD operation"""
    def __init__(self):
        #super(dbWrapper,self).__init__()
        self.cond = ' WHERE 1 '
        self.db = MySQLdb.connect(host = ds["host"],port = ds["port"],user = ds["user"],passwd = ds["passwd"],db = ds["db"],charset = "utf8")
        self.db.ping(True)  # auto reconnect on mysql server's gone away
        self.cur = self.db.cursor()
        self.order = ''
        self.sql = ''
        self.offset = '' #which record from
        self.page = ''   #how many records,-1 means till the last record
        
        
    def where(self,condition):
        self.cond += "AND "+condition if condition else "1"
        return self

    def orderby(self,field,order):
        self.order = ' order by '+field+" "+order
        return self
    
    def limit(self,offset,page=''):
        self.offset = str(offset)
        self.page = str(page)
        return self
        
    def getone(self,sql):
        print self.offset
        self.sql = sql+self.cond
        if self.order:
            self.sql += self.order
        if self.offset and not self.page:
            self.sql += " limit %s"%self.offset
        if self.offset and self.page:
            self.sql += " limit %s,%s"%(self.offset,self.page)
        try:
            print self.sql
            self.cur.execute(self.sql)
        except Exception as e:
            print "caught error when get one record from mysql:",e
        finally:
            
            self.cond =  ' WHERE 1 '
            self.order = ''
            self.offest = ''
            self.page = ''
            self.sql = ''
        return self.cur.fetchone()
    
    def getmany(self,sql):
        self.sql = sql + self.cond
        if self.order:
            self.sql += self.order
        if self.offset and not self.page:
            self.sql += " limit %s" % self.offset
        if self.offset and self.page:
            self.sql += " limit %s,%s" % (self.offset, self.page)
        try:
            self.cur.execute(self.sql)
            self.db.commit()
            results = self.cur.fetchall()
            return results
        except Exception as e:
            print "caught error when get one record from mysql:", e
        finally:
            self.cond = ' where 1 '
            self.order = ''
            self.offset = ''
            self.page = ''
            self.sql = ''


    def getsum(self,sql):
        self.sql = sql + self.cond
        #print self.sql
        try:
            self.cur.execute(self.sql)
            self.db.commit()
            num = self.cur.fetchone()
            return num[0]
        except Exception as e:
            print "caught error when get one record from mysql:", e
        finally:
            self.cond = ' where 1 '
            self.sql = ''

    def insertone(self,sql,values):
        # print sql
        try:
            self.cur.execute(sql, values)
            self.db.commit()
            return 1
        except Exception as e:
            print "caught error when insert into db", e
            self.db.rollback()
            
    def updateone(self,sql):
        '''update table set col1 = a,col2 = b,col3 = c where cond order by *'''
        try:
            self.cur.execute(sql + self.cond)
            self.db.commit()
            return 1
        except Exception as e:
            print "caught error when update db", e
            self.db.rollback()
            return 0
        finally:
            self.cond = ' where 1 '

    def remove(self,sql):
        "delete from zxgj_users where u_Id = 1;"
        self.sql = sql
        try:
            self.cur.execute(self.sql + self.cond)
            self.db.commit()
            return 1
        except Exception as e:
            print "caught error when delete record from table", e
            self.db.rollback()
            return 0
        finally:
            self.sql = ""
            self.cond = ' where 1 '

        
    def __del__(self):
        self.cur.close()
        self.db.close()

if __name__=="__main__":
    db = dbWrapper()
    sql = "select * from zxgj_admin_users"
    user=db.where(" a_id = 1 ").fetchone(sql)
    print user
            


        
        
        

        
        
